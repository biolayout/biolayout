/*

 BioLayoutExpress3D - A tool for visualisation
 and analysis of biological networks

 Copyright (c) 2006-2012 Genome Research Ltd.
 Authors: Thanos Theo, Anton Enright, Leon Goldovsky, Ildefonso Cases, Markus Brosch, Stijn van Dongen, Michael Kargas, Benjamin Boyer and Tom Freeman
 Contact: support@biolayout.org

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

 @ author, GLSL & OpenGL code author Thanos Theo, 2012

*/

#extension GL_ARB_tessellation_shader : enable

in vec3 vsNormal[];
in vec4 vsSceneColor[];
in vec2 vsTexCoord[];

patch out vec3 tsNormal[3];
patch out vec4 tsSceneColor[3];
patch out vec2 tsTexCoord[3];

uniform float pointNormalTrianglesLodTessellation;

const float MINIMUM_LOD_DETAIL = 5.0;
const float LOD_RADIUS = 2.0;

float getDMax(in vec3, in float);

layout (vertices = 3) out;

void main()
{
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    tsNormal[gl_InvocationID] = vsNormal[gl_InvocationID];
    tsSceneColor[gl_InvocationID] = vsSceneColor[gl_InvocationID];
    tsTexCoord[gl_InvocationID] = vsTexCoord[gl_InvocationID];

    if (gl_InvocationID == 0) 
    {
        float dmaxDetail = (pointNormalTrianglesLodTessellation < MINIMUM_LOD_DETAIL) 
                            ? 1.0f
                            : getDMax(gl_in[gl_InvocationID].gl_Position.xyz, LOD_RADIUS) * pointNormalTrianglesLodTessellation / 2.0f;

        // use scale and radius to help set the tessellation level
        gl_TessLevelOuter[0] = dmaxDetail;    
        gl_TessLevelOuter[1] = dmaxDetail;
        gl_TessLevelOuter[2] = dmaxDetail;
        gl_TessLevelInner[0] = dmaxDetail;
    }
}