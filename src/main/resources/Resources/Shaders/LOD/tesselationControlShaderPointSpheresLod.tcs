/*

 BioLayoutExpress3D - A tool for visualisation
 and analysis of biological networks

 Copyright (c) 2006-2012 Genome Research Ltd.
 Authors: Thanos Theo, Anton Enright, Leon Goldovsky, Ildefonso Cases, Markus Brosch, Stijn van Dongen, Michael Kargas, Benjamin Boyer and Tom Freeman
 Contact: support@biolayout.org

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

 @ author, GLSL & OpenGL code author Thanos Theo, 2012

*/

#extension GL_ARB_tessellation_shader : enable

in  vec3 vsCenter[];
in float vsRadius[];
in  vec4 vsSceneColor[];

patch out  vec3 tsCenter;
patch out float tsRadius;
patch out  vec4 tsSceneColor;

uniform float pointSpheresLodTessellation;

const float MINIMUM_LOD_DETAIL = 6.0;

float getDMax(in vec3, in float);

layout (vertices = 1) out;

void main()
{    
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position; // (0.0, 0.0, 0.0, 1.0)

    tsCenter = vsCenter[gl_InvocationID];
    tsRadius = vsRadius[gl_InvocationID];
    tsSceneColor = vsSceneColor[gl_InvocationID];

    if (gl_InvocationID == 0) 
    {
        float dmaxDetail;
        if (pointSpheresLodTessellation < MINIMUM_LOD_DETAIL)
            dmaxDetail = pointSpheresLodTessellation;
        else
        {
            dmaxDetail = 2.0 * getDMax(vsCenter[gl_InvocationID], vsRadius[gl_InvocationID]) * pointSpheresLodTessellation;
            if (dmaxDetail < MINIMUM_LOD_DETAIL) 
                dmaxDetail = MINIMUM_LOD_DETAIL;
        }

        // use scale and radius to help set the tessellation level
        gl_TessLevelOuter[0] = 2.0;    
        gl_TessLevelOuter[1] = dmaxDetail;
        gl_TessLevelOuter[2] = 2.0;
        gl_TessLevelOuter[3] = dmaxDetail;
        gl_TessLevelInner[0] = dmaxDetail;
        gl_TessLevelInner[1] = dmaxDetail;
    }
}